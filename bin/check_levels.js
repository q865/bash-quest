#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rootDir = path.resolve(__dirname, '..');
const levelsFile = path.resolve(rootDir, 'src', 'levels.json');

function checkLevels() {
    console.log('üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É—Ä–æ–≤–Ω–µ–π...');

    let levelsData;
    try {
        const rawData = fs.readFileSync(levelsFile, 'utf-8');
        levelsData = JSON.parse(rawData);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ ${levelsFile}:`, error);
        process.exit(1);
    }

    const blocks = levelsData.blocks;
    if (!blocks || !Array.isArray(blocks)) {
        console.error(`‚ùå –§–∞–π–ª ${levelsFile} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ 'blocks'.`);
        process.exit(1);
    }

    let errorCount = 0;

    for (const block of blocks) {
        console.log(`
üîé –ü—Ä–æ–≤–µ—Ä—è—é –±–ª–æ–∫: "${block.title}"`);
        if (!block.levels || !Array.isArray(block.levels)) {
            console.error(`  ‚ùå –£ –±–ª–æ–∫–∞ "${block.title}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –º–∞—Å—Å–∏–≤ 'levels'.`);
            errorCount++;
            continue;
        }

        for (const level of block.levels) {
            if (!level.id || !level.title || !level.path) {
                console.error(`  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Ä–æ–≤–Ω—è: ${JSON.stringify(level)}`);
                errorCount++;
                continue;
            }

            const levelPath = path.resolve(rootDir, level.path);
            
            if (!fs.existsSync(levelPath)) {
                console.error(`  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è ${level.id} ("${level.title}") –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${levelPath}`);
                errorCount++;
                continue;
            }

            const levelJsonPath = path.join(levelPath, 'level.json');
            if (!fs.existsSync(levelJsonPath)) {
                console.error(`  ‚ùå –§–∞–π–ª level.json –¥–ª—è —É—Ä–æ–≤–Ω—è ${level.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: ${levelPath}`);
                errorCount++;
            }

            const taskMdPath = path.join(levelPath, 'task.md');
            if (!fs.existsSync(taskMdPath)) {
                console.error(`  ‚ùå –§–∞–π–ª task.md –¥–ª—è —É—Ä–æ–≤–Ω—è ${level.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: ${levelPath}`);
                errorCount++;
            }
            
            if (errorCount === 0) {
                 console.log(`  ‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level.id} ("${level.title}") –≤ –ø–æ—Ä—è–¥–∫–µ.`);
            }
        }
    }

    if (errorCount > 0) {
        console.error(`

‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errorCount}.`);
        process.exit(1);
    } else {
        console.log('\n\n‚úÖ –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ.');
    }
}

checkLevels();
