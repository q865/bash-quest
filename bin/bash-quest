#!/usr/bin/env node

import chalk from 'chalk';
import inquirer from 'inquirer';
import gradient from 'gradient-string';
import figlet from 'figlet';
import ora from 'ora';
import boxen from 'boxen';
import { fileURLToPath, pathToFileURL } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- Definitive Module Imports ---
const gamePath = path.resolve(__dirname, '../src/game.js');
const uiPath = path.resolve(__dirname, '../src/ui.js');
const utilsPath = path.resolve(__dirname, '../src/utils.js');

const { default: Game } = await import(pathToFileURL(gamePath).href);
const { displayWelcome, displayProgress } = await import(pathToFileURL(uiPath).href);
const { typeWriter } = await import(pathToFileURL(utilsPath).href);
// --- End of Imports ---

const game = new Game();

const sleep = (ms = 1000) => new Promise((r) => setTimeout(r, ms));

async function showTask({ instant = false } = {}) {
    const task = await game.getTask();
    if (task.isComplete) {
        await typeWriter(chalk.bold.magenta('Упс, кажется, все уровни пройдены! Поздравляем!'));
        await typeWriter('Начинаем игру заново...');
        game.reset();
        return;
    }

    console.log(chalk.yellow.bold(`--- ${task.name} ---
`));
    if (instant) {
        console.log(chalk.cyan(task.task));
    } else {
        await typeWriter(chalk.cyan(task.task));
    }
}

async function handleBranch(branch) {
    await typeWriter(chalk.yellow(branch.message));
    
    const choices = branch.choices.map(choice => ({ name: choice.name, value: choice.next_level }));

    const { next_level_id } = await inquirer.prompt({
        type: 'list',
        name: 'next_level_id',
        message: 'Выбери свой путь:',
        choices: choices,
    });

    game.setLevel(next_level_id);
    console.log(chalk.green('Выбор сделан! Новые задания ждут.'));
    await sleep(1500);
}

async function handleCheck() {
  const spinner = ora('Дед проверяет твое решение...').start();
  await sleep();
  
  const result = await game.checkSolution();

  if (result.success) {
    spinner.succeed(chalk.green('Отлично, все верно! Задание выполнено.'));
    
    if (result.isComplete) {
        await typeWriter(chalk.bold.magenta('ДА ЛАДНО?! Ты прошел всю игру! Мое почтение.'));
        await typeWriter('Начинаем заново, чтобы скилл не терял.');
        game.reset();
        await sleep(3000);
        return true;
    }
    
    if (result.branch) {
        await handleBranch(result.branch);
    }

    await sleep(1500);
    return true;
  } else {
    spinner.fail(chalk.red('Хм, что-то не так.'));
    if (result.message) {
        console.log(chalk.red.bold('\nКомментарий Деда:'));
        await typeWriter(chalk.red.italic(result.message));
    }
    await sleep(1500);
    return false;
  }
}

async function showHint() {
    const hint = game.getHint();
    console.log(chalk.yellow.bold('Подсказка от Деда:'));
    await typeWriter(chalk.yellow.italic(hint));
}

function showHelp() {
    const welcome = chalk.bold.yellow('Добро пожаловать в "Кибер-закалку"!');
    const description = 'Это интерактивный курс для изучения командной строки Bash.';
    const howToPlay = chalk.bold('Как играть:');
    
    const step1 = '1. Выберите ' + chalk.green('"Показать текущее задание"') + ' из меню, чтобы получить задачу от Деда.';
    const step2 = '2. Выполните задание, вводя команды прямо в вашем терминале.';
    const step3 = '3. Выберите ' + chalk.green('"Проверить решение"') + ', чтобы Дед оценил вашу работу.';
    const step4 = '4. Если застряли, выберите ' + chalk.green('"Получить подсказку"') + '.';
    const goodLuck = 'Удачи, боец!';

    const helpText = [
        welcome,
        '',
        description,
        '',
        howToPlay,
        step1,
        step2,
        step3,
        step4,
        '',
        goodLuck
    ].join('\n');

    console.log(boxen(helpText, { padding: 1, borderStyle: 'double', borderColor: 'green' }));
}

async function mainMenu(taskShownOnce = false) {
  try {
    displayProgress(game.levelManifest, game.state.completedLevels);

    if (!process.stdout.isTTY) {
      console.log(chalk.yellow('Неинтерактивный терминал. Показываю текущее задание.'));
      return 'task';
    }

    const choices = [];
    if (taskShownOnce) {
        choices.push({ name: 'Показать задание еще раз', value: 'task_again' });
    } else {
        choices.push({ name: 'Показать текущее задание', value: 'task' });
    }

    choices.push(
        { name: 'Проверить решение', value: 'check' },
        { name: 'Получить подсказку', value: 'hint' },
        new inquirer.Separator(),
        { name: 'Помощь', value: 'help' },
        { name: 'Сбросить прогресс и начать сначала', value: 'reset' },
        { name: 'Выйти из игры', value: 'exit' }
    );

    const { action } = await inquirer.prompt({
      type: 'list',
      name: 'action',
      message: chalk.yellow('Что будем делать, боец?'),
      choices,
    });
    return action;
  } catch (error) {
    console.log(chalk.red('Ошибка интерактивного меню. Попробуйте запустить игру в стандартном терминале. Выход.'));
    return 'exit';
  }
}

async function pressEnterToContinue() {
    console.log('');
    if (!process.stdout.isTTY) {
        console.log(chalk.dim('...'));
        return;
    }
    await inquirer.prompt({
        type: 'input',
        name: 'key',
        message: chalk.dim('Нажмите Enter, чтобы продолжить...'),
    });
}

async function gameLoop() {
  displayWelcome();
  await sleep(2000);

  const actionFromCli = process.argv[2];

  if (actionFromCli) {
    console.clear();
    switch (actionFromCli) {
      case 'task':
        await showTask();
        break;
      case 'check':
        await handleCheck();
        break;
      case 'hint':
        await showHint();
        break;
      case 'help':
        showHelp();
        break;
      case 'reset':
        game.reset();
        console.log(chalk.yellow('Прогресс сброшен. Начинаем с чистого листа.'));
        break;
      default:
        console.log(chalk.red(`Неизвестное действие: ${actionFromCli}`));
    }
    console.log(gradient.pastel('\nДо встречи, боец!'));
    return;
  }

  if (!process.stdout.isTTY) {
    console.log(chalk.yellow('Обнаружен неинтерактивный терминал.'));
    console.log(chalk.cyan('Показываю текущее задание и выхожу.'));
    await showTask();
    console.log(gradient.pastel('\nДо встречи, бое-ц!'));
    return;
  }
  
  let running = true;
  let taskShownOnce = false;
  while (running) {
    console.clear();
    const action = await mainMenu(taskShownOnce);
    console.clear();

    switch (action) {
      case 'task':
        await showTask();
        taskShownOnce = true;
        await pressEnterToContinue();
        break;
      case 'task_again':
        await showTask({ instant: true });
        await pressEnterToContinue();
        break;
      case 'check':
        const wasCorrect = await handleCheck();
        if (wasCorrect) {
            taskShownOnce = false;
            console.clear();
            await showTask();
            taskShownOnce = true;
            await pressEnterToContinue();
        }
        break;
      case 'hint':
        await showHint();
        await pressEnterToContinue();
        break;
      case 'help':
        showHelp();
        await pressEnterToContinue();
        break;
      case 'reset':
        const { confirm } = await inquirer.prompt({
            type: 'confirm',
            name: 'confirm',
            message: chalk.red.bold('Ты уверен, что хочешь сбросить весь прогресс? Это действие необратимо!'),
            default: false
        });
        if (confirm) {
            game.reset();
            taskShownOnce = false;
            console.log(chalk.yellow('Прогресс сброшен. Начинаем с чистого листа.'));
        }
        await sleep(1500);
        break;
      case 'exit':
        running = false;
        break;
    }
  }
  console.log(gradient.pastel('До встречи, боец!'));
}

gameLoop();
